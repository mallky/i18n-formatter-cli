#!/usr/bin/env node
"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e=require("commander");const r=require("fs"),o=require("path"),i=[".git",".hg"],l=e=>i.some((i=>r.existsSync(o.join(e,i))));function t(e){for(;!l(e);){const r=o.resolve(e,"..");if(r===e)break;e=r}return e}const n=require("path"),s=require("fs"),c=(e,{root:r})=>{if(!s.existsSync(`${r}/${e}`))return console.log("config file not found. You can try run `i18n-cli init` to create config file");const o=require(`${r}/${e}`);if(!o)return console.log("config data is undefined. Please verify that you create config file with correct name");if(!o.localesDir)return console.log("`localesDir` is undefined. Please verify that you create `localesDir` field");let i=null;o?.localeToMerge&&(i=s.readFileSync(n.join(r,o.localeToMerge),"utf-8"));const l=s.readdirSync(n.join(r,o.localesDir));if(!l||0===l.length)return console.log("Didn't find any locales. Please add locales first");const t=l.filter((e=>e!==o?.localeToMerge)),c={};return t.forEach((e=>{c[e]=s.readFileSync(n.join(r,o.localesDir,e),"utf-8")})),{...o,localeFileNames:t,localeFiles:c,localeToMergeFile:i,root:r}},a=(e=".i18nfnrc.js")=>((e,r)=>e&&r(e,{root:t(n.dirname(n.resolve(e)))}))(e,c),f=(e,r)=>{const o=Object.keys(e),i={};return o.forEach((o=>{const l=e[o];if(r[o]){const t="string"==typeof e[o]?"string":"object",n="string"==typeof r[o]?"string":"object";i[o]="string"===t&&"string"===n?r[o]:t!==n?l:f(e[o],r[o])}else i[o]=l})),i},u=require("fs"),d=require("path"),g=require("cli-color"),m=()=>{const e=a();if(!e)return;const{localesDir:r,mainLocale:o,localeFiles:i,root:l}=e,t=((e,r)=>{const o=r[e],i=JSON.parse(o);return Object.entries(r).reduce(((r,[o,l])=>({...r,[o]:o===e?l:JSON.stringify(f(i,JSON.parse(l)))})),{})})(o,i);return Object.entries(t).forEach((([e,o])=>{u.writeFile(d.join(l,r,e),o,(r=>{if(r)return console.log(r);console.log(g.blue(`Keys successfuly added to ${e} locale`))}))})),e},p=require("path"),y=require("fs"),h=require("cli-color"),j=()=>{const e=t(p.dirname(p.resolve(".i18nfnrc.js")));if(y.existsSync(e+"/.i18nfnrc.js"))return console.log(h.red("File .i18nfnrc.js already exists"));y.writeFile(e+"/.i18nfnrc.js","module.exports = {\n  localesDir: './locales',\n  mainLocale: 'en-gb.json',\n  localeToMerge: './translation/externalTranslation.json'\n}",((e,r)=>{if(e)throw new Error(e);console.log(h.blue("File .i18nfnrc.js is created!"))}))},b=require("cli-color"),q=(e,r,o="")=>{const i=Object.keys(e);return r||(r={}),i.forEach((i=>{const l=e[i];if(r[i]){const l="string"==typeof e[i]?"string":"object",t="string"==typeof r[i]?"string":"object";"string"===l&&"string"===t?r[i]=e[i]:l!==t?console.log(b.bold.red(`Types of ${o}.${i} fields are defferent. Please merge this conflict manually.`)):r[i]={...r[i],...q(e[i],r[i],`${o}.${i}`)}}else r[i]=l})),r},F=(e,r)=>{if(!r)return e;const o=JSON.parse(e),i=r?JSON.parse(r):null;return JSON.stringify(q(o,i))},$=require("fs"),N=require("path"),S=require("cli-color"),w=(e,r)=>{const o=a();if(!o)return;const{localesDir:i,localeToMerge:l,localeFiles:t,localeToMergeFile:n,root:s}=o;if(!t[r]&&!n)return console.log(S.red(`File ${r} is not found. Please create ${r} first or add path to 'localeToMerge' in config file`));const c=F(t[r]||n,t[e]);$.writeFile(N.join(s,i,e),c,(o=>{if(o)return console.log(o);console.log(S.blue(`Keys from ${r||l} is successfuly added to ${e}`))}))},x=e=>{const r=a();if(!r)return;const{localesDir:o,mainLocale:i,localeFiles:l,root:t}=r;if(!l[i])return console.log(S.red(`File ${i} is not found. Please create ${i} first or add path to 'mainLocale' in config file`));const n=F(l[i]);$.writeFile(N.join(t,o,e),n,(r=>{if(r)return console.log(r);console.log(S.blue(`Keys from ${i} is successfuly added to ${e}`))}))},{execSync:D}=require("child_process");e.program.command("init").description("Init .i18nfnrc.js file").action(j),e.program.command("create <fileName>").description("Create new file `fileName` with all the same keys as in mainLocale file").action(x),e.program.command("add-all-keys").description("Add all keys from main translation file to all the others files").action(m),e.program.command("merge <fileName1> [fileName2]").description("Merge `fileName2` file keys to `fileName1`. If `fileName1` doesn't exist it will be created with all keys from `fileName2`. `fileName2` is `localeToMerge` file by default.").action(w),e.program.command("ui-start").description("Start the server to work with locale management through the UI. Default address `localhost:3000`").action((()=>{D("npm run build:ui"),D("npm run start:ui")})),e.program.parse(),exports.addAllKeys=m,exports.create=x,exports.init=j,exports.merge=w;
