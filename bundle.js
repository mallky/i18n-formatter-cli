#!/usr/bin/env node
"use strict";var e=require("commander");const o=require("fs"),r=require("path"),i=[".git",".hg"],l=e=>i.some((i=>o.existsSync(r.join(e,i))));function n(e){for(;!l(e);){const o=r.resolve(e,"..");if(o===e)break;e=o}return e}const t=require("path"),s=require("fs"),c=(e,{root:o})=>{if(!s.existsSync(`${o}/${e}`))return console.log("config file not found. You can try run `i18n-cli init` to create config file");const r=require(`${o}/${e}`);if(!r)return console.log("config data is undefined. Please verify that you create config file with correct name");if(!r.localesDir)return console.log("`localesDir` is undefined. Please verify that you create `localesDir` field");let i=null;r?.localeToMerge&&(i=s.readFileSync(t.join(o,r.localeToMerge),"utf-8"));const l=s.readdirSync(t.join(o,r.localesDir));if(!l||0===l.length)return console.log("Didn't find any locales. Please add locales first");const n=l.filter((e=>e!==r?.localeToMerge)),c={};return n.forEach((e=>{c[e]=s.readFileSync(t.join(o,r.localesDir,e),"utf-8")})),{...r,localeFileNames:n,localeFiles:c,localeToMergeFile:i,root:o}},a=(e=".i18nfnrc.js")=>((e,o)=>e&&o(e,{root:n(t.dirname(t.resolve(e)))}))(e,c),f=(e,o)=>{const r=Object.keys(e),i={};return r.forEach((r=>{const l=e[r];if(o[r]){const n="string"==typeof e[r]?"string":"object",t="string"==typeof o[r]?"string":"object";i[r]="string"===n&&"string"===t?o[r]:n!==t?l:f(e[r],o[r])}else i[r]=l})),i},u=require("fs"),d=require("path"),g=require("cli-color"),m=require("path"),y=require("fs"),p=require("cli-color"),j=require("cli-color"),h=(e,o,r="")=>{const i=Object.keys(e);return o||(o={}),i.forEach((i=>{const l=e[i];if(o[i]){const l="string"==typeof e[i]?"string":"object",n="string"==typeof o[i]?"string":"object";"string"===l&&"string"===n?o[i]=e[i]:l!==n?console.log(j.bold.red(`Types of ${r}.${i} fields are defferent. Please merge this conflict manually.`)):o[i]={...o[i],...h(e[i],o[i],`${r}.${i}`)}}else o[i]=l})),o},b=(e,o)=>{if(!o)return e;const r=JSON.parse(e),i=o?JSON.parse(o):null;return JSON.stringify(h(r,i))},F=require("fs"),$=require("path"),q=require("cli-color");e.program.command("init").description("Init .i18nfnrc.js file").action((()=>{const e=n(m.dirname(m.resolve(".i18nfnrc.js")));if(y.existsSync(e+"/.i18nfnrc.js"))return console.log(p.red("File .i18nfnrc.js already exists"));y.writeFileSync(e+"/.i18nfnrc.js","module.exports = {\n  localesDir: './mocks',\n  mainLocale: 'en-gb.json',\n  localeToMerge: 'externalTranslation.json'\n}",((e,o)=>{if(e)throw new Error(e);console.log(p.blue("File .i18nfnrc.js is created!"))}))})),e.program.command("create <fileName>").description("Create new file `fileName` with all the same keys as in mainLocale file").action((e=>{const o=a();if(!o)return;const{localesDir:r,mainLocale:i,localeFiles:l,root:n}=o;if(!l[i])return console.log(q.red(`File ${i} is not found. Please create ${i} first or add path to 'mainLocale' in config file`));const t=b(l[i]);F.writeFile($.join(n,r,e),t,(o=>{if(o)return console.log(o);console.log(q.blue(`Keys from ${i} is successfuly added to ${e}`))}))})),e.program.command("addAllKeys").description("Add all keys from main translation file to all the others files").action((()=>{const e=a();if(!e)return;const{localesDir:o,mainLocale:r,localeFiles:i,root:l}=e,n=((e,o)=>{const r=o[e],i=JSON.parse(r);return Object.entries(o).reduce(((o,[r,l])=>({...o,[r]:r===e?l:JSON.stringify(f(i,JSON.parse(l)))})),{})})(r,i);return Object.entries(n).forEach((([e,r])=>{u.writeFile(d.join(l,o,e),r,(o=>{if(o)return console.log(o);console.log(g.blue(`Keys successfuly added to ${e} locale`))}))})),e})),e.program.command("merge <fileName1> [fileName2]").description("Merge `fileName2` file keys to `fileName1`. If `fileName1` doesn't exist it will be created with all keys from `fileName2`. `fileName2` is `localeToMerge` file by default.").action(((e,o)=>{const r=a();if(!r)return;const{localesDir:i,localeToMerge:l,localeFiles:n,localeToMergeFile:t,root:s}=r;if(!n[o]&&!t)return console.log(q.red(`File ${o} is not found. Please create ${o} first or add path to 'localeToMerge' in config file`));const c=b(n[o]||t,n[e]);F.writeFile($.join(s,i,e),c,(r=>{if(r)return console.log(r);console.log(q.blue(`Keys from ${o||l} is successfuly added to ${e}`))}))})),e.program.parse();
